@article{Deb2002,
abstract = {Multi-objective evolutionary algorithms (MOEAs) that use$\backslash$nnon-dominated sorting and sharing have been criticized mainly for: (1)$\backslash$ntheir O(MN{\textless}sup{\textgreater}3{\textless}/sup{\textgreater}) computational complexity (where M is the number$\backslash$nof objectives and N is the population size); (2) their non-elitism$\backslash$napproach; and (3) the need to specify a sharing parameter. In this$\backslash$npaper, we suggest a non-dominated sorting-based MOEA, called NSGA-II$\backslash$n(Non-dominated Sorting Genetic Algorithm II), which alleviates all of$\backslash$nthe above three difficulties. Specifically, a fast non-dominated sorting$\backslash$napproach with O(MN{\textless}sup{\textgreater}2{\textless}/sup{\textgreater}) computational complexity is presented.$\backslash$nAlso, a selection operator is presented that creates a mating pool by$\backslash$ncombining the parent and offspring populations and selecting the best N$\backslash$nsolutions (with respect to fitness and spread). Simulation results on$\backslash$ndifficult test problems show that NSGA-II is able, for most problems, to$\backslash$nfind a much better spread of solutions and better convergence near the$\backslash$ntrue Pareto-optimal front compared to the Pareto-archived evolution$\backslash$nstrategy and the strength-Pareto evolutionary algorithm - two other$\backslash$nelitist MOEAs that pay special attention to creating a diverse$\backslash$nPareto-optimal front. Moreover, we modify the definition of dominance in$\backslash$norder to solve constrained multi-objective problems efficiently.$\backslash$nSimulation results of the constrained NSGA-II on a number of test$\backslash$nproblems, including a five-objective, seven-constraint nonlinear$\backslash$nproblem, are compared with another constrained multi-objective$\backslash$noptimizer, and the much better performance of NSGA-II is observed},
author = {Deb, Kalyanmoy and Pratap, Amrit and Agarwal, Sameer and Meyarivan, T.},
doi = {10.1109/4235.996017},
file = {:C$\backslash$:/Users/gsanh/Documents/Mendeley Desktop//Deb et al. - 2002 - A fast and elitist multiobjective genetic algorithm NSGA-II.pdf:pdf},
issn = {1089778X},
journal = {IEEE Transactions on Evolutionary Computation},
keywords = {Constraint handling,Elitism,Genetic algorithms,Multicriterion decision making,Multiobjective optimization,Pareto-optimal solutions},
mendeley-groups = {Memoria,Memoria/Heuristics and Metaheuristics,Memoria/Referencias Usadas Doc Final,Memoria/Documentos de dise{\~{n}}o},
title = {{A fast and elitist multiobjective genetic algorithm: NSGA-II}},
year = {2002}
}
@article{Syromiatnikov2014,
abstract = {Every software program that interacts with a user requires a user interface. Model-View-Controller (MVC) is a common design pattern to integrate a user interface with the application domain logic. MVC separates the representation of the application domain (Model) from the display of the application's state (View) and user interaction control (Controller). However, studying the literature reveals that a variety of other related patterns exists, which we denote with Model-View- (MV) design patterns. This paper discusses existing MV patterns classified in three main families: Model-View-Controller (MVC), Model-View-View Model (MVVM), and Model-View-Presenter (MVP). We take a practitioners' point of view and emphasize the essentials of each family as well as the differences. The study shows that the selection of patterns should take into account the use cases and quality requirements at hand, and chosen technology. We illustrate the selection of a pattern with an example of our practice. The study results aim to bring more clarity in the variety of MV design patterns and help practitioners to make better grounded decisions when selecting patterns.},
author = {Syromiatnikov, Artem and Weyns, Danny},
doi = {10.1109/WICSA.2014.13},
file = {:C$\backslash$:/Users/gsanh/Documents/Mendeley Desktop/Syromiatnikov, Weyns - 2014 - A journey through the land of model-view-design patterns.pdf:pdf},
isbn = {9781479934126},
journal = {Proceedings - Working IEEE/IFIP Conference on Software Architecture 2014, WICSA 2014},
keywords = {Design pattern,MVC,MVP,MVVM,User interface,controller,model,view},
mendeley-groups = {Memoria,Memoria/Documentos de dise{\~{n}}o,Memoria/MVC},
pages = {21--30},
publisher = {IEEE},
title = {{A journey through the land of model-view-design patterns}},
year = {2014}
}
@article{Boussaid2013,
abstract = {Metaheuristics are widely recognized as efficient approaches for many hard optimization problems. This paper provides a survey of some of the main metaheuristics. It outlines the components and concepts that are used in various metaheuristics in order to analyze their similarities and differences. The classification adopted in this paper differentiates between single solution based metaheuristics and population based metaheuristics. The literature survey is accompanied by the presentation of references for further details, including applications. Recent trends are also briefly discussed. {\textcopyright} 2013 Elsevier Inc. All rights reserved.},
author = {Boussa{\"{i}}d, Ilhem and Lepagnot, Julien and Siarry, Patrick},
doi = {10.1016/j.ins.2013.02.041},
file = {:C$\backslash$:/Users/gsanh/Documents/Mendeley Desktop/Boussa{\"{i}}d, Lepagnot, Siarry - 2013 - A survey on optimization metaheuristics.pdf:pdf},
issn = {00200255},
journal = {Information Sciences},
keywords = {Diversification,Intensification,Population based metaheuristic,Single solution based metaheuristic},
mendeley-groups = {Memoria,Memoria/Heuristics and Metaheuristics,Memoria/Referencias Usadas propuesta,Memoria/Referencias Usadas Doc Final,Memoria/Documentos de dise{\~{n}}o},
pages = {82--117},
title = {{A survey on optimization metaheuristics}},
volume = {237},
year = {2013}
}
@article{Heiss-Czedik1997,
abstract = {Genetic algorithms have been used in science and engineering as adaptive algorithms for solving practical problems and as computational models of natural evolutionary systems. This brief, accessible introduction describes some of the most interesting research in the field and also enables readers to implement and experiment with genetic algorithms on their own. It focuses in depth on a small set of important and interesting topics-particularly in machine learning, scientific modeling, and artificial life-and reviews a broad span of research, including the work of Mitchell and her colleagues. The descriptions of applications and modeling projects stretch beyond the strict boundaries of computer science to include dynamical systems theory, game theory, molecular biology, ecology, evolutionary biology, and population genetics.},
author = {Heiss-Czedik, Dorothea},
doi = {10.1162/artl.1997.3.63},
file = {:C$\backslash$:/Users/gsanh/Documents/Mendeley Desktop/Heiss-Czedik - 1997 - An introduction to genetic algorithms.pdf:pdf},
issn = {1064-5462},
journal = {Artificial Life},
mendeley-groups = {Memoria,Memoria/Referencias Usadas propuesta,Memoria/Heuristics and Metaheuristics,Memoria/Referencias Usadas Doc Final,Memoria/Documentos de dise{\~{n}}o},
number = {1},
pages = {63--65},
title = {{An introduction to genetic algorithms.}},
volume = {3},
year = {1997}
}
@book{Luke2013,
author = {Luke, Sean},
booktitle = {Genetic Programming and Evolvable Machines},
doi = {10.1007/s10710-011-9139-0},
edition = {second},
file = {:C$\backslash$:/Users/gsanh/Documents/Mendeley Desktop/Luke - 2013 - Essentials of metaheuristics.pdf:pdf},
isbn = {9781300549628},
issn = {1389-2576},
mendeley-groups = {Memoria,Memoria/Heuristics and Metaheuristics,Memoria/Referencias Usadas propuesta,Memoria/Referencias Usadas Doc Final,Memoria/Documentos de dise{\~{n}}o},
publisher = {Lulu},
title = {{Essentials of metaheuristics}},
year = {2013}
}
@article{Rocha2011,
abstract = {Since 2004. Java provides support to general purpose annotations (also known as metadata) that allows developers to define their your own annotation types. However, seven years after their inception in the Java language, we still do not have empirical evidence on how software developers are effectively using annotations in their systems. Therefore, this paper presents an empirical study on how annotations are used on a corpus of 106 open-source Java systems. On total, we have evaluated more than 160,000 annotations that have been applied to the source code of such systems. Our main findings can be summarized as follows: (a) the so-called annotation-hell phenomena affects many of the evaluated systems; (b) developers are using both pre-delined annotations and annotations delined by external frameworks, mostly annotations dedicated to persistence and testing; (c) most of the evaluated annotations have been employed to annotate methods (more than 90{\%}); (d) although Java does provide not support to annotations for anonymous classes, several programs from our corpus have applied annotations to such classes.},
author = {Rocha, Henrique and Valente, Marco Tulio},
file = {:C$\backslash$:/Users/gsanh/Documents/Mendeley Desktop/Rocha, Valente - 2011 - How annotations are used in Java An empirical study.pdf:pdf},
isbn = {1891706292},
journal = {SEKE 2011 - Proceedings of the 23rd International Conference on Software Engineering and Knowledge Engineering},
keywords = {Annotations,Empirical studies,Qualitas corpus},
mendeley-groups = {Memoria/Reflection and Annotation,Memoria/Referencias Usadas Doc Final,Memoria/Documentos de dise{\~{n}}o},
number = {June 2014},
pages = {426--431},
title = {{How annotations are used in Java: An empirical study}},
year = {2011}
}
@article{Yang2015,
author = {Yang, Xin She},
doi = {10.4249/scholarpedia.11472},
file = {:C$\backslash$:/Users/gsanh/Documents/Mendeley Desktop/Yang - 2015 - Metaheuristic optimization.pdf:pdf},
journal = {Scholarpedia},
mendeley-groups = {Memoria,Memoria/Referencias Usadas propuesta,Memoria/Heuristics and Metaheuristics,Memoria/Referencias Usadas Doc Final,Memoria/Documentos de dise{\~{n}}o},
number = {2011},
pages = {11472},
title = {{Metaheuristic optimization}},
volume = {6},
year = {2015}
}
@inproceedings{Nebro2015,
abstract = {jMetal, an open source, Java-based framework for multiobjective optimization with metaheuristics, has become a valuable tool for many researches in the area as well as for some industrial partners in the last ten years. Our experience using and maintaining it during that time, as well as the received comments and suggestions, have helped us improve the jMetal design and identify significant features to incorporate. This paper revisits the jMetal architecture, describing its refined new design, which relies on design patterns, principles from object-oriented design, and a better use of the Java language features to improve the quality of the code, without disregarding jMetal ever goals of simplicity, facility of use, flexibility, extensibility and portability. Among the newly incorporated features, jMetal supports live interaction with running algorithms and parallel execution of algorithms.},
author = {Nebro, Antonio J. and Durillo, Juan J. and Vergne, Matthieu},
booktitle = {GECCO 2015 - Companion Publication of the 2015 Genetic and Evolutionary Computation Conference},
doi = {10.1145/2739482.2768462},
file = {:C$\backslash$:/Users/gsanh/Documents/Mendeley Desktop//Nebro, Durillo, Vergne - 2016 - Redesigning the jMetal Multi-Objetive Optimization Framework.pdf:pdf},
isbn = {9781450334884},
keywords = {JMetal,Multi-objective metaheuristics,Open source,Optimization framework},
mendeley-groups = {Memoria/JMetal,Memoria/Documento de requisitos,Memoria/Documentos de dise{\~{n}}o},
title = {{Redesigning the jMetal multi-objective optimization framework}},
year = {2015}
}
@article{Braux1999,
abstract = {Reflection plays a major role in the programming of generic applications. However, it introduces an interpretation layer which is detrimental to performance. A solution consists of relying on partial evaluation to remove this interpretation layer. This paper deals with improving a standard partial evaluator in order to handle the Java reflection API. The improvements basically consist of taking type information into account when distinguishing between static and dynamic data, as well as introducing two new specialization actions: reflection actions. Benchmarks using the serialization framework show the benefits of the approach.},
author = {Braux, Mathias and Noy{\'{e}}, Jacques},
doi = {10.1145/328691.328693},
file = {:C$\backslash$:/Users/gsanh/Documents/Mendeley Desktop/Braux, Noy{\'{e}} - 1999 - Towards partially evaluating reflection in Java.pdf:pdf},
isbn = {1581132018},
issn = {03621340},
journal = {ACM SIGPLAN Notices},
mendeley-groups = {Memoria/Reflection and Annotation,Memoria/Referencias Usadas Doc Final,Memoria,Memoria/Documentos de dise{\~{n}}o},
number = {11},
pages = {2--11},
title = {{Towards partially evaluating reflection in Java}},
volume = {34},
year = {1999}
}
